{"ast":null,"code":"var _jsxFileName = \"/home/bernardoabreu/Desktop/wp5-dashboard/dashboard/src/utils/hooks/DynamicRemoteContainer.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useEffect, useState, lazy, Suspense } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useDynamicScript = url => {\n  _s();\n\n  const [ready, setReady] = useState(false);\n  const [failed, setFailed] = useState(false);\n  useEffect(() => {\n    if (!url) return;\n    const element = document.createElement(\"script\");\n    element.src = url;\n    element.type = \"text/javascript\";\n    element.async = true;\n    setReady(false);\n    setFailed(false);\n\n    element.onload = () => {\n      console.log(`Dynamic Script Loaded: ${url}`);\n      setReady(true);\n    };\n\n    element.onerror = () => {\n      console.error(`Dynamic Script Error: ${url}`);\n      setReady(false);\n      setFailed(true);\n    };\n\n    document.head.appendChild(element);\n    return () => {\n      console.log(`Dynamic Script Removed: ${url}`);\n      document.head.removeChild(element);\n    };\n  }, [url]);\n  return {\n    ready,\n    failed\n  };\n};\n\n_s(useDynamicScript, \"cgCmnFs4LO4f1+dqEfelQq09bhU=\");\n\nconst DynamicRemoteContainer = ({\n  url,\n  module: targetModule,\n  scope,\n  ...props\n}) => {\n  _s2();\n\n  const {\n    ready,\n    failed\n  } = useDynamicScript(url);\n  console.log('ready :>> ', ready);\n  if (!ready) return /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: [\"Loading dynamic script: \", url]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 22\n  }, this);\n  if (failed) return /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: [\"Failed to load dynamic script: \", url]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 22\n  }, this); // const Component = lazy(\n  //   async () =>\n  //     await window[scope].get(module).then((factory) => {\n  //       const Module = factory();\n  //       return Module;\n  //     })\n  // );\n  // new Promise(resolve => \n  //       resolve(window[scope].init(legacyShareScope)))\n  //         .then(() => window[scope].get(targetModule)\n  //           .then(factory => moduleResolve(factory()))\n  //         );\n  //     })\n\n  function loadComponent(scope, module) {\n    return async () => {\n      // const moduleResolve = resolve;\n      // Initializes the shared scope. Fills it with known provided modules from this build and all remotes\n      await __webpack_init_sharing__('default');\n      const legacyShareScope = {\n        react: {\n          [react.version]: {\n            get: () => new Promise(resolve => resolve(() => react)),\n            loaded: true,\n            from: \"webpack4\"\n          }\n        },\n        \"react-dom\": {\n          [reactDom.version]: {\n            get: () => new Promise(resolve => resolve(() => reactDom)),\n            loaded: true,\n            from: \"webpack4\"\n          }\n        },\n        recoil: {\n          [recoil]: {\n            get: () => new Promise(resolve => resolve(() => recoil)),\n            loaded: true,\n            from: \"webpack4\"\n          }\n        },\n        \"@emotion/react\": {\n          [emotion]: {\n            get: () => new Promise(resolve => resolve(() => emotion)),\n            loaded: true,\n            from: \"webpack4\"\n          }\n        }\n      };\n      const container = window[scope]; // or get the container somewhere else\n      // Initialize the container, it may provide shared modules\n\n      await container.init(legacyShareScope);\n      const factory = await window[scope].get(module);\n      const Module = factory();\n      return Module;\n    };\n  } // const Component = lazy(\n  //   async () =>\n  //     new Promise(resolve => {\n  //       const moduleResolve = resolve;\n  //       const react = require(\"react\");\n  //       const reactDom = require(\"react-dom\");\n  //       const recoil = require(\"recoil\");\n  //       const emotion = require(\"@emotion/react\");\n  //       const legacyShareScope = {\n  //         react: {\n  //           [react.version]: {\n  //             get: () => new Promise(resolve => resolve(() => react)),\n  //             loaded: true,\n  //             from: \"webpack4\",\n  //           },\n  //         },\n  //         \"react-dom\": {\n  //           [reactDom.version]: {\n  //             get: () => new Promise(resolve => resolve(() => reactDom)),\n  //             loaded: true,\n  //             from: \"webpack4\",\n  //           },\n  //         },\n  //         recoil: {\n  //           [recoil]: {\n  //             get: () => new Promise(resolve => resolve(() => recoil)),\n  //             loaded: true,\n  //             from: \"webpack4\",\n  //           },\n  //         },\n  //         \"@emotion/react\": {\n  //           [emotion]: {\n  //             get: () => new Promise(resolve => resolve(() => emotion)),\n  //             loaded: true,\n  //             from: \"webpack4\",\n  //           },\n  //         },\n  //       };\n  //       new Promise(resolve => \n  //       resolve(window[scope].init(legacyShareScope)))\n  //         .then(() => window[scope].get(targetModule)\n  //           .then(factory => moduleResolve(factory()))\n  //         );\n  //     })\n  // );\n\n\n  const Component = /*#__PURE__*/lazy(loadComponent(props.scope, props.module));\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: \"Loading System\",\n    children: /*#__PURE__*/_jsxDEV(Component, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(DynamicRemoteContainer, \"DD7iWqYvsRB3t/fItKErVD9mgCY=\", false, function () {\n  return [useDynamicScript];\n});\n\n_c = DynamicRemoteContainer;\nexport default DynamicRemoteContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DynamicRemoteContainer\");","map":{"version":3,"sources":["/home/bernardoabreu/Desktop/wp5-dashboard/dashboard/src/utils/hooks/DynamicRemoteContainer.jsx"],"names":["useEffect","useState","lazy","Suspense","useDynamicScript","url","ready","setReady","failed","setFailed","element","document","createElement","src","type","async","onload","console","log","onerror","error","head","appendChild","removeChild","DynamicRemoteContainer","module","targetModule","scope","props","loadComponent","__webpack_init_sharing__","legacyShareScope","react","version","get","Promise","resolve","loaded","from","reactDom","recoil","emotion","container","window","init","factory","Module","Component"],"mappings":"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","sourcesContent":["import { \n  useEffect, \n  useState, \n  lazy, \n  Suspense\n} from \"react\";\n\nconst useDynamicScript = url => {\n  const [ready, setReady] = useState(false);\n  const [failed, setFailed] = useState(false);\n\n  useEffect(() => {\n    if(!url) return;\n\n    const element = document.createElement(\"script\");\n\n    element.src = url;\n    element.type = \"text/javascript\";\n    element.async = true;\n\n    setReady(false);\n    setFailed(false);\n\n    element.onload = () => {\n      console.log(`Dynamic Script Loaded: ${url}`);\n      setReady(true);\n    };\n\n    element.onerror = () => {\n      console.error(`Dynamic Script Error: ${url}`);\n      setReady(false);\n      setFailed(true);\n    };\n\n    document.head.appendChild(element);\n\n    return () => {\n      console.log(`Dynamic Script Removed: ${url}`);\n      document.head.removeChild(element);\n    };\n  }, [url])\n\n  return {\n    ready,\n    failed\n  };\n};\n\nconst DynamicRemoteContainer = ({ \n  url, \n  module: targetModule, \n  scope, \n  ...props \n}) => {\n  \n  const { ready, failed } = useDynamicScript(url);\n\n  console.log('ready :>> ', ready);\n\n  if (!ready) return <h2>Loading dynamic script: {url}</h2>;\n  \n  if (failed) return <h2>Failed to load dynamic script: {url}</h2>;\n\n  // const Component = lazy(\n  //   async () =>\n  //     await window[scope].get(module).then((factory) => {\n  //       const Module = factory();\n  //       return Module;\n  //     })\n  // );\n\n  // new Promise(resolve => \n    //       resolve(window[scope].init(legacyShareScope)))\n    //         .then(() => window[scope].get(targetModule)\n    //           .then(factory => moduleResolve(factory()))\n    //         );\n    //     })\n\n  function loadComponent(scope, module) {\n    return async () => {\n      // const moduleResolve = resolve;\n\n      // Initializes the shared scope. Fills it with known provided modules from this build and all remotes\n      await __webpack_init_sharing__('default');\n\n    const legacyShareScope = {\n        react: {\n          [react.version]: {\n            get: () => new Promise(resolve => resolve(() => react)),\n            loaded: true,\n            from: \"webpack4\",\n          },\n        },\n        \"react-dom\": {\n          [reactDom.version]: {\n            get: () => new Promise(resolve => resolve(() => reactDom)),\n            loaded: true,\n            from: \"webpack4\",\n          },\n        },\n        recoil: {\n          [recoil]: {\n            get: () => new Promise(resolve => resolve(() => recoil)),\n            loaded: true,\n            from: \"webpack4\",\n          },\n        },\n        \"@emotion/react\": {\n          [emotion]: {\n            get: () => new Promise(resolve => resolve(() => emotion)),\n            loaded: true,\n            from: \"webpack4\",\n          },\n        },\n      };\n\n      const container = window[scope]; // or get the container somewhere else\n      \n      // Initialize the container, it may provide shared modules\n      await container.init(legacyShareScope);\n      const factory = await window[scope].get(module);\n      const Module = factory();\n      return Module;\n    };\n  }\n\n  // const Component = lazy(\n  //   async () =>\n  //     new Promise(resolve => {\n  //       const moduleResolve = resolve;\n\n  //       const react = require(\"react\");\n  //       const reactDom = require(\"react-dom\");\n  //       const recoil = require(\"recoil\");\n  //       const emotion = require(\"@emotion/react\");\n\n  //       const legacyShareScope = {\n  //         react: {\n  //           [react.version]: {\n  //             get: () => new Promise(resolve => resolve(() => react)),\n  //             loaded: true,\n  //             from: \"webpack4\",\n  //           },\n  //         },\n  //         \"react-dom\": {\n  //           [reactDom.version]: {\n  //             get: () => new Promise(resolve => resolve(() => reactDom)),\n  //             loaded: true,\n  //             from: \"webpack4\",\n  //           },\n  //         },\n  //         recoil: {\n  //           [recoil]: {\n  //             get: () => new Promise(resolve => resolve(() => recoil)),\n  //             loaded: true,\n  //             from: \"webpack4\",\n  //           },\n  //         },\n  //         \"@emotion/react\": {\n  //           [emotion]: {\n  //             get: () => new Promise(resolve => resolve(() => emotion)),\n  //             loaded: true,\n  //             from: \"webpack4\",\n  //           },\n  //         },\n  //       };\n\n  //       new Promise(resolve => \n  //       resolve(window[scope].init(legacyShareScope)))\n  //         .then(() => window[scope].get(targetModule)\n  //           .then(factory => moduleResolve(factory()))\n  //         );\n  //     })\n  // );\n\n  const Component = lazy(\n    loadComponent(props.scope, props.module)\n  );\n\n  return (\n    <Suspense fallback=\"Loading System\">\n      <Component {...props} />\n    </Suspense>\n  )\n}\n\nexport default DynamicRemoteContainer;"]},"metadata":{},"sourceType":"module"}